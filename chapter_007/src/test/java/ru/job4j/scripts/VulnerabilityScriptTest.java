package ru.job4j.scripts;

import org.junit.Test;
import java.util.ArrayList;
import java.util.List;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.*;

/**
 * @author Sir-Hedgehog (mailto:quaresma_08@mail.ru)
 * @version $Id$
 * @since 08.09.2019
 */

public class VulnerabilityScriptTest {
    @Test
    public void checkDependenciesForDepthOf2() {
        List<VulnerabilityScript> list = new ArrayList<>(List.of(new VulnerabilityScript(7, new ArrayList<>(List.of(95, 10, 5))),
                                                                 new VulnerabilityScript(5, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(10, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(95, new ArrayList<>(List.of()))));
        List<VulnerabilityScript> result = new ArrayList<>(List.of(new VulnerabilityScript(7, new ArrayList<>(List.of())),
                                                                   new VulnerabilityScript(95, new ArrayList<>(List.of())),
                                                                   new VulnerabilityScript(10, new ArrayList<>(List.of())),
                                                                   new VulnerabilityScript(5, new ArrayList<>(List.of()))));
        SaneOrder saneOrder = new SaneOrder();
        assertThat(saneOrder.order(list), is(result.toString()));
    }

    @Test
    public void checkDependenciesForDepthOf3() {
        List<VulnerabilityScript> list = new ArrayList<>(List.of(new VulnerabilityScript(12, new ArrayList<>(List.of(32, 3, 47))),
                                                                 new VulnerabilityScript(32, new ArrayList<>(List.of(55, 69))),
                                                                 new VulnerabilityScript(3, new ArrayList<>(List.of(6))),
                                                                 new VulnerabilityScript(47, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(55, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(69, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(6, new ArrayList<>(List.of()))));
        List<VulnerabilityScript> result = new ArrayList<>(List.of(new VulnerabilityScript(12, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(32, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(3, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(6, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(69, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(55, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(47, new ArrayList<>(List.of()))));

        SaneOrder saneOrder = new SaneOrder();
        assertThat(saneOrder.order(list), is(result.toString()));
    }

    @Test
    public void checkDependenciesForDepthOf4() {
        List<VulnerabilityScript> list = new ArrayList<>(List.of(new VulnerabilityScript(91, new ArrayList<>(List.of(17, 33, 55))),
                                                                 new VulnerabilityScript(66, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(17, new ArrayList<>(List.of(9, 5))),
                                                                 new VulnerabilityScript(33, new ArrayList<>(List.of(21))),
                                                                 new VulnerabilityScript(13, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(55, new ArrayList<>(List.of(71))),
                                                                 new VulnerabilityScript(9, new ArrayList<>(List.of(13))),
                                                                 new VulnerabilityScript(10, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(5, new ArrayList<>(List.of(10))),
                                                                 new VulnerabilityScript(71, new ArrayList<>(List.of(66))),
                                                                 new VulnerabilityScript(97, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(21, new ArrayList<>(List.of(97)))));
        List<VulnerabilityScript> result = new ArrayList<>(List.of(new VulnerabilityScript(91, new ArrayList<>(List.of())),
                                                                   new VulnerabilityScript(33, new ArrayList<>(List.of())),
                                                                   new VulnerabilityScript(17, new ArrayList<>(List.of())),
                                                                   new VulnerabilityScript(55, new ArrayList<>(List.of())),
                                                                   new VulnerabilityScript(71, new ArrayList<>(List.of())),
                                                                   new VulnerabilityScript(9, new ArrayList<>(List.of())),
                                                                   new VulnerabilityScript(5, new ArrayList<>(List.of())),
                                                                   new VulnerabilityScript(21, new ArrayList<>(List.of())),
                                                                   new VulnerabilityScript(97, new ArrayList<>(List.of())),
                                                                   new VulnerabilityScript(10, new ArrayList<>(List.of())),
                                                                   new VulnerabilityScript(13, new ArrayList<>(List.of())),
                                                                   new VulnerabilityScript(66, new ArrayList<>(List.of()))));

        SaneOrder saneOrder = new SaneOrder();
        assertThat(saneOrder.order(list), is(result.toString()));
    }
}
