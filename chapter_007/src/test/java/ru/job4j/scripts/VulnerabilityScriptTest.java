package ru.job4j.scripts;

import org.junit.Test;

import java.util.*;

import static org.hamcrest.Matchers.is;
import static org.junit.Assert.*;

/**
 * @author Sir-Hedgehog (mailto:quaresma_08@mail.ru)
 * @version $Id$
 * @since 23.09.2019
 */

public class VulnerabilityScriptTest {
    @Test
    public void checkDependenciesForDepthOf2() {
        List<VulnerabilityScript> list = new ArrayList<>(List.of(new VulnerabilityScript(95, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(10, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(5, new ArrayList<>(List.of()))));
        Set<Integer> result = new LinkedHashSet<>(Set.of(7, 95, 10, 5));
        SaneOrder saneOrder = new SaneOrder(new VulnerabilityScript(7, new ArrayList<>(List.of(95, 10, 5))));
        assertThat(saneOrder.order(list), is(result));
    }

    @Test
    public void checkDependenciesForDepthOf3() {
        List<VulnerabilityScript> list = new ArrayList<>(List.of(new VulnerabilityScript(47, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(69, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(32, new ArrayList<>(List.of(55, 69))),
                                                                 new VulnerabilityScript(3, new ArrayList<>(List.of(6))),
                                                                 new VulnerabilityScript(55, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(6, new ArrayList<>(List.of()))));
        Set<Integer> result = new LinkedHashSet<>(Set.of(12, 32, 3, 47, 55, 69, 6));
        SaneOrder saneOrder = new SaneOrder(new VulnerabilityScript(12, new ArrayList<>(List.of(32, 3, 47))));
        assertThat(saneOrder.order(list), is(result));
    }

    @Test
    public void checkDependenciesForDepthOf4() {
        List<VulnerabilityScript> list = new ArrayList<>(List.of(new VulnerabilityScript(66, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(17, new ArrayList<>(List.of(9, 5))),
                                                                 new VulnerabilityScript(33, new ArrayList<>(List.of(21))),
                                                                 new VulnerabilityScript(13, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(55, new ArrayList<>(List.of(71))),
                                                                 new VulnerabilityScript(9, new ArrayList<>(List.of(13))),
                                                                 new VulnerabilityScript(10, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(5, new ArrayList<>(List.of(10))),
                                                                 new VulnerabilityScript(71, new ArrayList<>(List.of(66))),
                                                                 new VulnerabilityScript(97, new ArrayList<>(List.of())),
                                                                 new VulnerabilityScript(21, new ArrayList<>(List.of(97)))));
        Set<Integer> result = new LinkedHashSet<>(Set.of(91, 17, 33, 55, 9, 5, 21, 71, 13, 10, 97, 66));
        SaneOrder saneOrder = new SaneOrder(new VulnerabilityScript(91, new ArrayList<>(List.of(17, 33, 55))));
        assertThat(saneOrder.order(list), is(result));
    }
}
